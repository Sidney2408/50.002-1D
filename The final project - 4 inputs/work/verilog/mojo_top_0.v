/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    input reset,
    output reg buzzer,
    output reg [3:0] ledgame,
    output reg right,
    output reg wrong,
    input yellowbutton,
    input greenbutton,
    input redbutton,
    input bluebutton
  );
  
  
  
  integer i;
  
  reg rst;
  
  reg [71:0] longarr;
  
  reg [3:0] check;
  
  wire [8-1:0] M_boolean_module_boole;
  reg [6-1:0] M_boolean_module_alufn;
  reg [8-1:0] M_boolean_module_a;
  reg [8-1:0] M_boolean_module_b;
  boolean_1 boolean_module (
    .alufn(M_boolean_module_alufn),
    .a(M_boolean_module_a),
    .b(M_boolean_module_b),
    .boole(M_boolean_module_boole)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_button_conditionerYellow_out;
  reg [1-1:0] M_button_conditionerYellow_in;
  button_conditioner_3 button_conditionerYellow (
    .clk(clk),
    .in(M_button_conditionerYellow_in),
    .out(M_button_conditionerYellow_out)
  );
  wire [1-1:0] M_button_conditionerRed_out;
  reg [1-1:0] M_button_conditionerRed_in;
  button_conditioner_3 button_conditionerRed (
    .clk(clk),
    .in(M_button_conditionerRed_in),
    .out(M_button_conditionerRed_out)
  );
  wire [1-1:0] M_button_conditionerGreen_out;
  reg [1-1:0] M_button_conditionerGreen_in;
  button_conditioner_3 button_conditionerGreen (
    .clk(clk),
    .in(M_button_conditionerGreen_in),
    .out(M_button_conditionerGreen_out)
  );
  wire [1-1:0] M_button_conditionerBlue_out;
  reg [1-1:0] M_button_conditionerBlue_in;
  button_conditioner_3 button_conditionerBlue (
    .clk(clk),
    .in(M_button_conditionerBlue_in),
    .out(M_button_conditionerBlue_out)
  );
  wire [1-1:0] M_resetbutton_out;
  reg [1-1:0] M_resetbutton_in;
  button_conditioner_3 resetbutton (
    .clk(clk),
    .in(M_resetbutton_in),
    .out(M_resetbutton_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_8 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_detectorRed_out;
  reg [1-1:0] M_button_detectorRed_in;
  edge_detector_9 button_detectorRed (
    .clk(clk),
    .in(M_button_detectorRed_in),
    .out(M_button_detectorRed_out)
  );
  wire [1-1:0] M_button_detectorYellow_out;
  reg [1-1:0] M_button_detectorYellow_in;
  edge_detector_9 button_detectorYellow (
    .clk(clk),
    .in(M_button_detectorYellow_in),
    .out(M_button_detectorYellow_out)
  );
  wire [1-1:0] M_button_detectorBlue_out;
  reg [1-1:0] M_button_detectorBlue_in;
  edge_detector_9 button_detectorBlue (
    .clk(clk),
    .in(M_button_detectorBlue_in),
    .out(M_button_detectorBlue_out)
  );
  wire [1-1:0] M_button_detectorGreen_out;
  reg [1-1:0] M_button_detectorGreen_in;
  edge_detector_9 button_detectorGreen (
    .clk(clk),
    .in(M_button_detectorGreen_in),
    .out(M_button_detectorGreen_out)
  );
  wire [1-1:0] M_reset_detector_out;
  reg [1-1:0] M_reset_detector_in;
  edge_detector_9 reset_detector (
    .clk(clk),
    .in(M_reset_detector_in),
    .out(M_reset_detector_out)
  );
  wire [1-1:0] M_ctr_value;
  counter_14 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  reg [27:0] M_gameclock_d, M_gameclock_q = 1'h0;
  reg [3:0] M_index_d, M_index_q = 1'h0;
  reg [3:0] M_attempts_d, M_attempts_q = 1'h0;
  reg [3:0] M_mistakes_d, M_mistakes_q = 1'h0;
  reg [35:0] M_storage_d, M_storage_q = 1'h0;
  reg [3:0] M_iteration_d, M_iteration_q = 2'h3;
  reg [63:0] M_randomseed_d, M_randomseed_q = 1'h1;
  reg [7:0] M_randomstore_d, M_randomstore_q = 1'h0;
  reg [27:0] M_delay_d, M_delay_q = 1'h0;
  wire [32-1:0] M_random_num;
  reg [1-1:0] M_random_next;
  reg [32-1:0] M_random_seed;
  pn_gen_15 random (
    .clk(clk),
    .rst(rst),
    .next(M_random_next),
    .seed(M_random_seed),
    .num(M_random_num)
  );
  reg [3:0] M_level_d, M_level_q = 1'h0;
  localparam IDLE_state = 3'd0;
  localparam DISPLAY_state = 3'd1;
  localparam BUTTONS_state = 3'd2;
  localparam TRANSITION_state = 3'd3;
  localparam GAMEOVER_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_randomseed_d = M_randomseed_q;
    M_mistakes_d = M_mistakes_q;
    M_index_d = M_index_q;
    M_level_d = M_level_q;
    M_randomstore_d = M_randomstore_q;
    M_attempts_d = M_attempts_q;
    M_delay_d = M_delay_q;
    M_gameclock_d = M_gameclock_q;
    M_iteration_d = M_iteration_q;
    M_storage_d = M_storage_q;
    
    M_button_conditionerRed_in = !redbutton;
    M_button_conditionerYellow_in = !yellowbutton;
    M_button_conditionerBlue_in = !bluebutton;
    M_button_conditionerGreen_in = !greenbutton;
    M_resetbutton_in = !reset;
    M_button_detectorYellow_in = M_button_conditionerYellow_out;
    M_button_detectorRed_in = M_button_conditionerRed_out;
    M_button_detectorGreen_in = M_button_conditionerGreen_out;
    M_button_detectorBlue_in = M_button_conditionerBlue_out;
    M_reset_detector_in = M_resetbutton_out;
    ledgame[3+0-:1] = M_button_conditionerYellow_out;
    ledgame[2+0-:1] = M_button_conditionerRed_out;
    ledgame[1+0-:1] = M_button_conditionerGreen_out;
    ledgame[0+0-:1] = M_button_conditionerBlue_out;
    M_reset_detector_in = M_resetbutton_out;
    M_random_seed = 1'h0;
    M_random_next = 1'h0;
    right = 1'h0;
    wrong = 1'h0;
    buzzer = 1'h0;
    M_boolean_module_a = 1'h0;
    M_boolean_module_b = 1'h0;
    M_boolean_module_alufn = 1'h0;
    ledgame = 4'h0;
    led = M_iteration_q[(M_level_q)*1+0-:1];
    longarr[0+3-:4] = 4'h8;
    longarr[4+3-:4] = 4'h1;
    longarr[8+3-:4] = 4'h1;
    longarr[12+3-:4] = 4'h8;
    longarr[16+3-:4] = 4'h1;
    longarr[20+3-:4] = 4'h8;
    longarr[24+3-:4] = 4'h1;
    longarr[28+3-:4] = 4'h8;
    longarr[32+3-:4] = 4'h1;
    longarr[36+3-:4] = 4'h8;
    longarr[40+3-:4] = 4'h8;
    longarr[44+3-:4] = 4'h1;
    longarr[48+3-:4] = 4'h8;
    longarr[52+3-:4] = 4'h1;
    longarr[56+3-:4] = 4'h8;
    longarr[60+3-:4] = 4'h1;
    longarr[64+3-:4] = 4'h1;
    longarr[68+3-:4] = 4'h8;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_edge_detector_in = M_ctr_value;
    if (M_mistakes_q == 2'h3) begin
      M_state_d = GAMEOVER_state;
    end
    
    case (M_state_q)
      IDLE_state: begin
        if (M_reset_detector_out) begin
          M_state_d = DISPLAY_state;
          led = 1'h1;
        end
      end
      DISPLAY_state: begin
        M_gameclock_d = M_gameclock_q + 1'h1;
        if ((M_gameclock_q[0+27-:28] > 28'h47868c0) && (M_iteration_q > 1'h0) && M_gameclock_q[0+27-:28] < 28'hee6b280) begin
          ledgame = longarr[(M_randomstore_q[0+2-:3])*4+3-:4];
        end
        if (M_gameclock_q[0+27-:28] == 28'hd693a40 && M_iteration_q > 1'h0) begin
          M_storage_d[(M_index_q)*4+3-:4] = longarr[(M_randomstore_q[0+2-:3])*4+3-:4];
        end
        if (M_gameclock_q[0+27-:28] == 28'hfffffff && M_iteration_q > 1'h0) begin
          M_random_seed = M_randomseed_q;
          M_random_next = 1'h1;
          M_randomseed_d = M_randomseed_q + 1'h1;
          M_randomstore_d = M_random_num;
          M_index_d = M_index_q + 1'h1;
          M_iteration_d = M_iteration_q - 1'h1;
        end
        if (M_iteration_q == 1'h0) begin
          M_index_d = 1'h0;
          M_state_d = BUTTONS_state;
        end
      end
      TRANSITION_state: begin
        M_delay_d = M_delay_q + 1'h1;
        M_gameclock_d = 1'h0;
        M_index_d = 1'h0;
        M_attempts_d = 1'h0;
        for (i = 1'h0; i < 4'h9; i = i + 1) begin
          M_storage_d[(i)*4+3-:4] = 1'h0;
        end
        
        case (M_level_q)
          1'h0: begin
            M_iteration_d = 2'h3;
          end
          1'h1: begin
            M_iteration_d = 3'h5;
          end
          2'h2: begin
            M_iteration_d = 3'h7;
          end
          2'h3: begin
            M_iteration_d = 4'h9;
          end
          default: begin
            M_iteration_d = 1'h0;
          end
        endcase
        if (M_delay_q >= 25'h1ffffff) begin
          M_delay_d = 1'h0;
          M_state_d = DISPLAY_state;
        end
      end
      BUTTONS_state: begin
        
        case (M_level_q)
          1'h0: begin
            if (M_attempts_q == 2'h3) begin
              M_level_d = M_level_q + 1'h1;
              M_state_d = TRANSITION_state;
            end
          end
          1'h1: begin
            if (M_attempts_q == 3'h5) begin
              M_level_d = M_level_q + 1'h1;
              M_state_d = TRANSITION_state;
            end
          end
          2'h2: begin
            if (M_attempts_q == 3'h7) begin
              M_level_d = M_level_q + 1'h1;
              M_state_d = TRANSITION_state;
            end
          end
          2'h3: begin
            if (M_attempts_q == 4'h9) begin
              M_level_d = M_level_q + 1'h1;
              M_state_d = TRANSITION_state;
            end
          end
        endcase
        if (M_button_detectorBlue_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h01;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
            M_attempts_d = M_attempts_q + 1'h1;
            M_index_d = M_index_q + 1'h1;
          end
          if (check == 1'h0) begin
            M_mistakes_d = M_mistakes_q + 1'h1;
            wrong = 1'h1;
            M_state_d = TRANSITION_state;
          end
        end
        if (M_button_conditionerBlue_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h01;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
          end
          if (check == 1'h0) begin
            wrong = 1'h1;
            buzzer = 1'h1;
          end
        end
        if (M_button_detectorYellow_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h08;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
            M_attempts_d = M_attempts_q + 1'h1;
            M_index_d = M_index_q + 1'h1;
          end
          if (check != 1'h1) begin
            M_mistakes_d = M_mistakes_q + 1'h1;
            wrong = 1'h1;
            M_state_d = TRANSITION_state;
          end
        end
        if (M_button_conditionerYellow_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h08;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
          end
          if (check != 1'h1) begin
            wrong = 1'h1;
            buzzer = 1'h1;
          end
        end
        if (M_button_detectorRed_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h04;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
            M_attempts_d = M_attempts_q + 1'h1;
            M_index_d = M_index_q + 1'h1;
          end
          if (check == 1'h0) begin
            M_mistakes_d = M_mistakes_q + 1'h1;
            wrong = 1'h1;
            M_state_d = TRANSITION_state;
          end
        end
        if (M_button_conditionerRed_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h04;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
          end
          if (check == 1'h0) begin
            wrong = 1'h1;
            buzzer = 1'h1;
          end
        end
        if (M_button_detectorGreen_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h02;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
            M_attempts_d = M_attempts_q + 1'h1;
            M_index_d = M_index_q + 1'h1;
          end
          if (check != 1'h1) begin
            M_mistakes_d = M_mistakes_q + 1'h1;
            wrong = 1'h1;
            M_state_d = TRANSITION_state;
          end
        end
        if (M_button_conditionerGreen_out) begin
          M_boolean_module_alufn = 6'h07;
          M_boolean_module_a = 8'h02;
          M_boolean_module_b = M_storage_q[(M_index_q)*4+3-:4];
          check = (&M_boolean_module_boole[0+3-:4]);
          if (check == 1'h1) begin
            right = 1'h1;
          end
          if (check != 1'h1) begin
            wrong = 1'h1;
            buzzer = 1'h1;
          end
        end
      end
      GAMEOVER_state: begin
        if (M_reset_detector_out) begin
          ledgame = 1'h0;
          M_mistakes_d = 1'h0;
          M_level_d = 1'h0;
          M_index_d = 1'h0;
          M_iteration_d = 2'h3;
          M_gameclock_d = 1'h0;
          for (i = 1'h0; i < 4'h9; i = i + 1) begin
            M_storage_d[(i)*4+3-:4] = 1'h0;
          end
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gameclock_q <= 1'h0;
      M_index_q <= 1'h0;
      M_attempts_q <= 1'h0;
      M_mistakes_q <= 1'h0;
      M_storage_q <= 1'h0;
      M_iteration_q <= 2'h3;
      M_randomseed_q <= 1'h1;
      M_randomstore_q <= 1'h0;
      M_delay_q <= 1'h0;
      M_level_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_gameclock_q <= M_gameclock_d;
      M_index_q <= M_index_d;
      M_attempts_q <= M_attempts_d;
      M_mistakes_q <= M_mistakes_d;
      M_storage_q <= M_storage_d;
      M_iteration_q <= M_iteration_d;
      M_randomseed_q <= M_randomseed_d;
      M_randomstore_q <= M_randomstore_d;
      M_delay_q <= M_delay_d;
      M_level_q <= M_level_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
